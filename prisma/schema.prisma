// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EsrbRating {
  id    Int      @id @default(autoincrement())
  name  String
  slug  String   @unique
  games Game[]

}

model ParentPlatform {
  id     Int     @id @default(autoincrement())
  name   String
  slug   String  @unique
  games  Game[] 
}

model Genre {
  id                  Int     @id @default(autoincrement())
  name                String
  slug                String  @unique
  backgroundImage     String
  games               Game[]
}

model Tag {
  id                  Int      @id @default(autoincrement())
  name                String
  slug                String   @unique
  backgroundImage     String
  games               Game[]
}

model Rating {
  id          Int       @id @default(autoincrement())
  rating      Float
  createdAt   DateTime  @default(now())

  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  game        Game      @relation(fields: [gameId], references: [id])
  gameId      Int

  @@unique([userId, gameId])

}

model Comment {
  id                  Int       @id @default(autoincrement())
  createdAt           DateTime  @default(now())
  content             String

  user                User      @relation(fields: [userId], references: [id])
  userId              Int
  game                Game      @relation(fields: [gameId], references: [id])
  gameId              Int
  commentActions      CommentAction[]
  repliedTo           Comment?   @relation("Replies", fields: [repliedToId], references: [id])
  repliedToId         Int?
  replies             Comment[]  @relation("Replies")

  @@unique([userId, gameId])

}


model CommentAction {
  id                  Int         @id @default(autoincrement())
  createdAt           DateTime    @default(now())
  isLike              Boolean
  user                User        @relation(fields: [userId], references: [id])
  userId              Int
  comment             Comment     @relation(fields: [commentId], references: [id])
  commentId           Int

  @@unique([userId, commentId])

}

enum GameStatus {
  PLAYING
  BEATEN
  DROPPED
  TO_PLAY
}

model UserGameStatus {
  id          Int       @id @default(autoincrement())
  userId      Int 
  user        User          @relation(fields: [userId], references: [id])
  gameId      Int
  game        Game          @relation(fields: [gameId], references: [id])
  status      GameStatus

  @@unique([userId, gameId])

}

// model Playlist {

// 

model GameStudio {
  id                  Int     @id @default(autoincrement())
  slug                String  @unique
  name                String
  games               Game[]
}

model User {
  id                  Int     @id @default(autoincrement())
  username            String  @unique
  email               String  @unique
  name                String?
  profileImage        String?
  password            String?
  resetPasswordToken  String?

  ratings             Rating[]
  comments            Comment[]
  commentActions      CommentAction[]
  games               UserGameStatus[]
 
}

model Game {
  id                  Int      @id @default(autoincrement())
  name                String
  slug                String   @unique
  backgroundImage     String
  screenshots         String[]
  trailers            String[] // TODO MIGRATE
  description         String?
  metacritic          Int?
  released            DateTime
  tba                 Boolean
  pcRequirements      Json?  
  ratingsCount        Int?
  averageRating       Float?
  esrbRatingId        Int?
  gameStudioId        Int?

  esrbRating          EsrbRating? @relation(fields: [esrbRatingId], references: [id])
  parentPlatforms     ParentPlatform[]
  genres              Genre[]
  tags                Tag[]   
  ratings             Rating[]
  comments            Comment[]
  users               UserGameStatus[]
  gameStudio          GameStudio? @relation(fields: [gameStudioId], references: [id])
}
